// Generated by view binder compiler. Do not edit!
package com.example.projectmulumbatwo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.projectmulumbatwo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityProductBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button addProductButton;

  @NonNull
  public final EditText productBarcodeEditText;

  @NonNull
  public final EditText productNameEditText;

  @NonNull
  public final EditText productPriceEditText;

  private ActivityProductBinding(@NonNull RelativeLayout rootView, @NonNull Button addProductButton,
      @NonNull EditText productBarcodeEditText, @NonNull EditText productNameEditText,
      @NonNull EditText productPriceEditText) {
    this.rootView = rootView;
    this.addProductButton = addProductButton;
    this.productBarcodeEditText = productBarcodeEditText;
    this.productNameEditText = productNameEditText;
    this.productPriceEditText = productPriceEditText;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityProductBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityProductBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_product, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityProductBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_product_button;
      Button addProductButton = ViewBindings.findChildViewById(rootView, id);
      if (addProductButton == null) {
        break missingId;
      }

      id = R.id.product_barcode_edit_text;
      EditText productBarcodeEditText = ViewBindings.findChildViewById(rootView, id);
      if (productBarcodeEditText == null) {
        break missingId;
      }

      id = R.id.product_name_edit_text;
      EditText productNameEditText = ViewBindings.findChildViewById(rootView, id);
      if (productNameEditText == null) {
        break missingId;
      }

      id = R.id.product_price_edit_text;
      EditText productPriceEditText = ViewBindings.findChildViewById(rootView, id);
      if (productPriceEditText == null) {
        break missingId;
      }

      return new ActivityProductBinding((RelativeLayout) rootView, addProductButton,
          productBarcodeEditText, productNameEditText, productPriceEditText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
